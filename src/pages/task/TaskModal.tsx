import { IAction, IModalProps } from '@/types/modal.ts'
import { Job } from '@/types'
import { ShadcnAntdModal } from '@/components/ShadcnAntdModal.tsx'
import { isDebugEnable, log } from '@/common/Logger.ts'
import { useEffect, useImperativeHandle, useState } from 'react'
import { Card, Col, Form, Input, Row, Select } from 'antd'
import CronEditor from '@/pages/cron/CronEditor.tsx'

const title = '‰ªªÂä°'

export default function TaskModal({ parentRef, onRefresh }: IModalProps) {
  const [form] = Form.useForm()
  const [open, setOpen] = useState(false)
  const [action, setAction] = useState<IAction>('create')
  const [jobInfo, setJobInfo] = useState<Job.JobItem>({} as Job.JobItem)

  // Êö¥Èú≤ÊñπÊ≥ïÁªôÁà∂ÁªÑ‰ª∂
  useImperativeHandle(parentRef, () => ({
    openModal,
    closeModal: () => setOpen(false),
  }))

  const openModal = (action: IAction, data?: Job.JobItem) => {
    if (isDebugEnable) log.info('ÂºπÁ™óÂºÄÂêØ: ', action, data)
    setAction(action)
    setJobInfo(data || ({} as Job.JobItem)) // ‰øùÂ≠òÊï∞ÊçÆÁî®‰∫éÂª∂ËøüËÆæÂÄº
    setOpen(true)
    form.resetFields() // ÂÖàÈáçÁΩÆÔºåÈÅøÂÖçÊÆãÁïô
  }

  // üîÑ Âª∂ËøüËÆæÁΩÆÂ≠óÊÆµÔºåÁ°Æ‰øù Form Â∑≤ÊåÇËΩΩ
  useEffect(() => {
    if (open && action === 'edit' && jobInfo?.id) {
      setTimeout(() => {
        form.setFieldsValue(jobInfo)
      }, 5)
    }
  }, [open, action, jobInfo, form])

  const handleCancel = () => {
    if (isDebugEnable) log.info('ÂèñÊ∂àÁºñËæë')
    setOpen(false)
  }

  const handleOk = () => {
    const fieldsValue = form.getFieldsValue()
    log.info(`Êìç‰Ωú: ${action} :`, fieldsValue)

    if (action === 'create') {
      handleCreate(fieldsValue)
    } else {
      handleEdit(fieldsValue)
    }

    setOpen(false)
    onRefresh()

    function handleCreate(values: any) {
      if (isDebugEnable) log.info(`handle-create: ${values} :`, fieldsValue)
    }

    function handleEdit(values: any) {
      if (isDebugEnable) log.info(`handle-edit: ${values} :`, fieldsValue)
    }
  }

  function handleReset() {
    setJobInfo({} as Job.JobItem)
    form.resetFields()
  }

  return (
    <ShadcnAntdModal<Job.JobItem>
      width={900}
      open={open}
      onCancel={handleCancel}
      onOk={handleOk}
      onReset={handleReset}
      title={action === 'edit' ? 'ÁºñËæë' + title : 'Êñ∞Âª∫' + title}
      data={jobInfo}
      destroyOnHidden={true}
    >
      {() => (
        <Form form={form} layout="horizontal" initialValues={{ executorFailRetryCount: 0 }}>
          <Form.Item name="id" hidden>
            <Input />
          </Form.Item>

          {/* ‚Äî‚Äî Âü∫Á°ÄÈÖçÁΩÆ ‚Äî‚Äî */}
          <Card title="Âü∫Á°ÄÈÖçÁΩÆ" variant="outlined" style={{ marginBottom: '12px' }}>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item label="ÊâßË°åÂô®" name="jobGroup" rules={[{ required: true }]}>
                  <Select placeholder="ËØ∑ÈÄâÊã©ÊâßË°åÂô®" options={[]} />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item label="‰ªªÂä°ÊèèËø∞" name="jobDesc" rules={[{ required: true }]}>
                  <Input placeholder="ËØ∑ËæìÂÖ•‰ªªÂä°ÊèèËø∞" />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item label="Ë¥üË¥£‰∫∫" name="author" rules={[{ required: true }]}>
                  <Input placeholder="ËØ∑ËæìÂÖ•Ë¥üË¥£‰∫∫" />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item label="Êä•Ë≠¶ÈÇÆ‰ª∂" name="alarmEmail" rules={[{ required: true }]}>
                  <Input placeholder="ËØ∑ËæìÂÖ•Êä•Ë≠¶ÈÇÆ‰ª∂ÔºåÂ§ö‰∏™ÈÄóÂè∑ÂàÜÈöî" />
                </Form.Item>
              </Col>
            </Row>
          </Card>

          {/* ‚Äî‚Äî Ë∞ÉÂ∫¶ÈÖçÁΩÆ ‚Äî‚Äî */}
          <Card title="Ë∞ÉÂ∫¶ÈÖçÁΩÆ" variant="outlined" style={{ marginBottom: '12px' }}>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item label="Ë∞ÉÂ∫¶Á±ªÂûã" name="scheduleType" rules={[{ required: true }]}>
                  <Select
                    placeholder="ËØ∑ÈÄâÊã©Á±ªÂûã"
                    options={[
                      { label: 'CRON', value: 'CRON' },
                      { label: 'Âõ∫ÂÆöÈÄüÁéá', value: 'FIX_RATE' },
                    ]}
                  />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item label="Cron" name="scheduleConf" rules={[{ required: true }]}>
                  <CronEditor onChange={() => log.info('cron')} value="" />
                </Form.Item>
              </Col>
            </Row>
          </Card>

          {/* ‚Äî‚Äî ‰ªªÂä°ÈÖçÁΩÆ ‚Äî‚Äî */}
          <Card title="‰ªªÂä°ÈÖçÁΩÆ" variant="outlined" style={{ marginBottom: '12px' }}>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item label="ËøêË°åÊ®°Âºè" name="glueType" rules={[{ required: true }]}>
                  <Select
                    options={[
                      { label: 'BEAN', value: 'BEAN' },
                      { label: 'GLUE Java', value: 'GLUE_JAVA' },
                    ]}
                  />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item label="JobHandler" name="executorHandler" rules={[{ required: true }]}>
                  <Input placeholder="ËØ∑ËæìÂÖ•JobHandler" />
                </Form.Item>
              </Col>
              <Col span={24}>
                <Form.Item label="‰ªªÂä°ÂèÇÊï∞" name="executorParam" rules={[{ required: true }]}>
                  <Input.TextArea allowClear placeholder="ËØ∑ËæìÂÖ•‰ªªÂä°ÂèÇÊï∞" />
                </Form.Item>
              </Col>
            </Row>
          </Card>

          {/* ‚Äî‚Äî È´òÁ∫ßÈÖçÁΩÆ ‚Äî‚Äî */}
          <Card title="È´òÁ∫ßÈÖçÁΩÆ" variant="outlined" style={{ marginBottom: '12px' }}>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item label="Ë∑ØÁî±Á≠ñÁï•" name="executorRouteStrategy">
                  <Select
                    placeholder="ËØ∑ÈÄâÊã©Á≠ñÁï•"
                    options={[
                      { label: 'Á¨¨‰∏Ä‰∏™', value: 'FIRST' },
                      { label: 'ËΩÆËØ¢', value: 'ROUND' },
                    ]}
                  />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item label="Â≠ê‰ªªÂä°ID" name="childJobId">
                  <Input placeholder="ËØ∑ËæìÂÖ•Â≠ê‰ªªÂä°ID, Â¶ÇÂ≠òÂú®Â§ö‰∏™ÂàôÁî®ÈÄóÂè∑ÂàÜÈöî" />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item label="Ë∞ÉÂ∫¶ËøáÊúüÁ≠ñÁï•" name="misfireStrategy">
                  <Select
                    placeholder="ËØ∑ÈÄâÊã©"
                    options={[
                      { label: 'ÂøΩÁï•', value: 'DO_NOTHING' },
                      { label: 'Á´ãÂç≥ÊâßË°å', value: 'FIRE_ONCE_NOW' },
                    ]}
                  />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item label="ÈòªÂ°ûÂ§ÑÁêÜÁ≠ñÁï•" name="executorBlockStrategy">
                  <Select
                    placeholder="ËØ∑ÈÄâÊã©"
                    options={[
                      { label: '‰∏≤Ë°åÊâßË°å', value: 'SERIAL_EXECUTION' },
                      { label: 'Âπ∂Ë°åÊâßË°å', value: 'CONCURRENT_EXECUTION' },
                      { label: 'ÂçïÊú∫‰∏≤Ë°å', value: 'SINGLE_MACHINE' },
                    ]}
                  />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item label="‰ªªÂä°Ë∂ÖÊó∂Êó∂Èó¥" name="executorTimeout">
                  <Input placeholder="Âçï‰ΩçÁßíÔºåÂ§ß‰∫éÈõ∂Êó∂ÁîüÊïà" type="number" />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item label="Â§±Ë¥•ÈáçËØïÊ¨°Êï∞" name="executorFailRetryCount">
                  <Input placeholder="Â§±Ë¥•ÈáçËØïÊ¨°Êï∞ÔºåÂ§ß‰∫éÈõ∂Êó∂ÁîüÊïà" type="number" />
                </Form.Item>
              </Col>
            </Row>
          </Card>
        </Form>
      )}
    </ShadcnAntdModal>
  )
}
